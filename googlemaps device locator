// lisätään google maps kirjasto
#include <google-maps-device-locator.h>

// lisätään mqtt kirjasto
#include <MQTT.h>

//määritellään 
MQTT client("broker.hivemq.com", 1883, callback);

GoogleMapsDeviceLocator locator;

// recieve message
void playRainbow(){
    RGB.color(255, 0, 0);
    client.publish("outTopic/message","255 0 0");
    delay(1000);
    RGB.color(0, 255, 0);
    client.publish("outTopic/message","0 255 0");
    delay(1000);
    RGB.color(0, 0, 255);
    client.publish("outTopic/message","0 0 255");
    delay(1000);
    RGB.color(255, 255, 255);
    client.publish("outTopic/message","255 255 255");
    delay(1000);
    RGB.color(255, 255, 0);
    client.publish("outTopic/message","255 255 0");
    delay(1000);
    RGB.color(255, 0, 255);
    client.publish("outTopic/message","255 0 255");
    delay(1000);
    }
void locationCallback(float lat, float lon, float accuracy){
  
  String locationMessage = "Lat " + String(lat) + " Lon " + String(lon);
  
  client.publish("outTopic/message", locationMessage);  }

void callback(char* topic, byte* payload, unsigned int length) {
char p[length + 1];
memcpy(p, payload, length);
p[length] = NULL;

if (!strcmp(p, "RAINBOW"))
    playRainbow();
    delay(100);
}

void setup() {
locator.withSubscribe(locationCallback).withLocatePeriodic(10);

RGB.control(true);

// connect to the server(unique id by Time.now())
client.connect("sparkclient_" + String(Time.now()));

// publish/subscribe
if (client.isConnected()) {
client.publish("outTopic/message","hello world");
client.subscribe("inTopic/message");
}
}

void loop() {
if (client.isConnected())
client.loop();
locator.loop();
}
